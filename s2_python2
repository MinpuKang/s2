#!/usr/bin/env python
#_*_ coding:utf-8 _*_
#Version: 2.4
#Author: Minpu Kang
#Create Date:2016-09-03
#Version 2.4 build at 2018-12-05
#Options:This is a common version in Linux/Unix Server with Python 2.7.
#        Update the size Adaptive
#        Version 2 is to fix the error of exiting ssh for some special action like Ctrl+C
#        Version 2.1 is to fix if any node cannot be login after reboot, reinstall or upgrading.
#        Version 2.2 is to fix with new cli of ssh-keygen if any node cannot be login after reboot, reinstall or upgrading.
#        Version 2.3 is to fix login failed once the public key has transferred to remote server
#        Version 2.4 is to support to mark the obsoleted nodes and sort the all node list

import sys
import time
import os
import pexpect
import struct
import fcntl
import termios
import signal
import socket

usr_home = os.path.expanduser('~')
node_file="%s/nodes" % usr_home
known_hosts_file="%s/.ssh/known_hosts" % usr_home

#print all nodes
def print_nodes():
    f = open(node_file, "rb")
    f_line=f.readlines()
    node_list=[]
    print "Currently node list:",
    for line in f_line:
        node_info = line.decode().strip("\r\n").split(",")
        if node_info[0].startswith("#") == False:
            node_list.append(node_info[0])
    node_list.sort()
    for i in node_list:
        print i,
    print ("\n")
    f.close()

#set the size
def sigwinch_passthrough (sig, data):
    winsize = getwinsize()
    global ssh 
    ssh.setwinsize(winsize[0],winsize[1])

def getwinsize():
    """This returns the window size of the child tty.
    The return value is a tuple of (rows, cols).
    """
    if 'TIOCGWINSZ' in dir(termios):
        TIOCGWINSZ = termios.TIOCGWINSZ
    else:
        TIOCGWINSZ = 1074295912L # Assume
    s = struct.pack('HHHH', 0, 0, 0, 0)
    x = fcntl.ioctl(sys.stdout.fileno(), TIOCGWINSZ, s)
    return struct.unpack('HHHH', x)[0:2]

#nodes information and ssh to nodes
def login_node(nodes):
    f = open(node_file, "rb")
    f_line=f.readlines()
    n_node=len(f_line)
    j=1
    for line in f_line:
        node_info = line.strip("\r\n").split(",")
        if node_info[0] == nodes:
            node = node_info[0]
            user = node_info[2]
            host = node_info[1]
            port = node_info[4]
            password = node_info[3]
            print "Start Date and Time: "+time.strftime("%Y-%m-%d %H:%M:%S", time.localtime())
            print "Node: %s"%node
            print "Host: %s"%host
            print "User: %s"%user
            if os.path.exists(known_hosts_file):
                #cmd_del_hosts = "sed -i \"/"+host+"/d\" "+known_hosts_file
                cmd_del_hosts = "ssh-keygen -f \""+known_hosts_file+"\" -R "+host+" > /dev/null 2>&1"
                os.system(cmd_del_hosts)
            ssh = pexpect.spawn('ssh  %s@%s -p %s' % (user, host, port))
            #signal.signal(signal.SIGWINCH, sigwinch_passthrough)
            winsize = getwinsize();
            ssh.setwinsize(winsize[0], winsize[1])
            try: 
                i = ssh.expect(['.*Are you sure you want to continue connecting (yes/no)?','.*assword.*','.*Last login: *'],timeout=60)
                if i == 0: 
                    ssh.sendline('yes') 
                    i = ssh.expect(['.*Are you sure you want to continue connecting (yes/no)?','.*assword.*','.*Last login: *'],timeout=60)
                if i == 1: 
                    ssh.sendline(password) 
                title = "echo -n \"\033]0;%s\007\";" %node 
                os.system(title) 
            except pexpect.EOF: 
                print "EOF:Connection timed out. Please kindly check if node info is correct or not!" 
                ssh.close()
            except pexpect.TIMEOUT: 
                print "TIMEOUT:Connection timed out. Please kindly check if node info is correct or not!" 
                ssh.close()
            return ssh
            break
        else:
            if j == n_node:
                print "No nodes matched"
                print_nodes()
        j+=1
    f.close()

def usage(s2name):
    print "This is used for quickly login nodes based on special node name in the file:\"%s\""%node_file
    print "Usage: %s node [-h]"%s2name
    print "Options:"
    print "  node    Node     Set node name to login"
    print "  -h      Help     Show the help\n"
    print "Example:"
    print "-----------------------------------\n"
    print "  Login the node hk:"
    print "  user@host> %s hk\n"%s2name
    print "-----------------------------------\n"
    print "Nodes info can be updated into file:%s"%node_file
    print "Format in the file:node_name,ip,user,password,port"
    print "Options:"
    print "1.Node name must be unique in the file!"
    print "2.If no special port,set default 22!"
    print "3.Password can be empty!"
    print "An example without password:"
    print "hk,192.168.10.5,admin,,22\n"
    if os.path.exists(node_file):
        print_nodes()

if __name__ == '__main__':
    s2name=(str(sys.argv[0][sys.argv[0].rfind(os.sep) + 1:]).split("/")[-1])
    if len(sys.argv) < 2:
        print "ERROR: missing node name"
        usage(s2name)
    else:
        node_name = sys.argv[1]
        if node_name=="-h":
            usage(s2name)
        else:
            if os.path.exists(node_file):
                isssh = login_node(node_name)
                if isssh != None:
                    isssh.interact()
                    hostName = socket.gethostname()
                    title = "echo -n \"\033]0;%s\007\";" %hostName
                    os.system(title)
                    print "End Date and Time: "+time.strftime("%Y-%m-%d %H:%M:%S", time.localtime())
            else:
                print "Node file \"%s\" doesnot exist!"%node_file
                usage(s2name)
    sys.exit(1)
#finished
